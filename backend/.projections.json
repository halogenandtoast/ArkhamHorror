{
  "arkham-api/library/Arkham/Effect/Effects/*.hs": {
    "type": "effect",
    "alternate": "arkham-api/tests/Arkham/Effect/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Effect.Effects.{dot}",
      "  ( {dot}(..)",
      "  , {dot|snakecase|camelcase}",
      "  ) where",
      "",
      "import Arkham.Prelude",
      "",
      "import Arkham.Classes",
      "import Arkham.Effect.Runner",
      "",
      "newtype {dot} = {dot} EffectAttrs",
      "  deriving anyclass HasAbilities",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: EffectArgs -> {dot}",
      "{dot|snakecase|camelcase} = {dot} . uncurry4 (baseAttrs \"TODO: ID\")",
      "",
      "instance HasModifiersFor {dot}",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-api/library/Arkham/Act/Cards/*.hs": {
    "type": "act",
    "alternate": "arkham-api/tests/Arkham/Act/Cards/{}Spec.hs",
    "template": [
       "module Arkham.Act.Cards.{dot} ({dot|snakecase|camelcase}) where",
       "",
       "import Arkham.Act.Cards qualified as Cards",
       "import Arkham.Act.Import.Lifted",
       "",
       "newtype {dot} = {dot} ActAttrs",
       "  deriving anyclass (IsAct, HasModifiersFor)",
       "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity, HasAbilities)",
       "",
       "{dot|snakecase|camelcase} :: ActCard {dot}",
       "{dot|snakecase|camelcase} = act (1, A) {dot} Cards.{dot|snakecase|camelcase} Nothing",
       "",
       "instance RunMessage {dot} where",
       "  runMessage msg a@({dot} attrs) = runQueueT $ case msg of",
       "    AdvanceAct (isSide B attrs -> True) _ _ -> do",
       "      advanceActDeck attrs",
       "      pure a",
       "    _ -> {dot} <$> liftRunMessage msg attrs"
    ]
  },
  "arkham-api/library/Arkham/Scenario/Scenarios/*.hs": {
    "type": "scenario",
    "alternate": "arkham-api/tests/Arkham/Scenario/Scenarios/{}Spec.hs",
    "template": [
      "module Arkham.Scenario.Scenarios.{dot}",
      "  ( {dot}(..)",
      "  , {dot|snakecase|camelcase}",
      "  ) where",
      "",
      "import Arkham.Scenario.Import.Lifted",
      "import Arkham.Scenarios.{dot}.Helpers",
      "import Arkham.EncounterSet qualified as Set",
      "",
      "newtype {dot} = {dot} ScenarioAttrs",
      "  deriving anyclass (IsScenario, HasModifiersFor)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: Difficulty -> {dot}",
      "{dot|snakecase|camelcase} difficulty = scenario",
      "  {dot}",
      "  \"TODO: ID\"",
      "  \"TODO: NAME\"",
      "  difficulty",
      "  []",
      "",
      "instance HasChaosTokenValue {dot} where",
      "  getChaosTokenValue iid tokenFace ({dot} attrs) = case tokenFace of",
      "    Skull -> pure $ toChaosTokenValue attrs Skull 3 5",
      "    Cultist -> pure $ ChaosTokenValue Cultist NoModifier",
      "    Tablet -> pure $ ChaosTokenValue Tablet NoModifier",
      "    ElderThing -> pure $ ChaosTokenValue ElderThing NoModifier",
      "    otherFace -> getChaosTokenValue iid otherFace attrs",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg s@({dot} attrs) = runQueueT $ scenarioI18n $ case msg of",
      "    PreScenarioSetup -> do",
      "      story $ i18nWithTitle \"intro1\"",
      "      pure s",
      "    Setup -> runScenarioSetup {dot} attrs do",
      "      gather Set.{dot}",
      "    _ -> {dot} <$> liftRunMessage msg attrs"
    ]
  },
  "arkham-api/library/Arkham/Campaign/Campaigns/*.hs": {
    "type": "campaign",
    "alternate": "arkham-api/tests/Arkham/Campaign/Campaigns/{}Spec.hs",
    "template": [
       "module Arkham.Campaign.Campaigns.{dot}",
       "  ( {dot}(..)",
       "  , {dot|snakecase|camelcase}",
       "  ) where",
       "",
       "import Arkham.Prelude",
       "",
       "import Arkham.Campaign.Runner",
       "import Arkham.CampaignStep",
       "import Arkham.ChaosToken",
       "import Arkham.Classes",
       "import Arkham.Difficulty",
       "import Arkham.Id",
       "",
       "newtype {dot} = {dot} CampaignAttrs",
       "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity, HasModifiersFor)",
       "",
       "{dot|snakecase|camelcase} :: Difficulty -> {dot}",
       "{dot|snakecase|camelcase} difficulty =",
       "  campaign",
       "    {dot}",
       "    (CampaignId \"TODO: ID\")",
       "    \"TODO: Name\"",
       "    difficulty",
       "    chaosBagContents",
       " where",
       "  chaosBagContents = case difficulty of",
       "    Easy -> []",
       "    Standard -> []",
       "    Hard -> []",
       "    Expert -> []",
       "",
       "instance IsCampaign {dot} where",
       "  nextStep a = case campaignStep (toAttrs a) of",
       "    PrologueStep -> Nothing",
       "    EpilogueStep -> Nothing",
       "    UpgradeDeckStep nextStep' -> Just nextStep'",
       "    _ -> Nothing",
       "",
       "instance RunMessage {dot} where",
       "  runMessage msg c@({dot} _attrs) = defaultCampaignRunner msg c"
    ]
  },
  "arkham-api/library/Arkham/Agenda/Cards/*.hs": {
    "type": "agenda",
    "alternate": "arkham-api/tests/Arkham/Agenda/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Agenda.Cards.{dot} ({dot|snakecase|camelcase}) where",
      "",
      "import Arkham.Agenda.Cards qualified as Cards",
      "import Arkham.Agenda.Import.Lifted",
      "",
      "newtype {dot} = {dot} AgendaAttrs",
      "  deriving anyclass (IsAgenda, HasModifiersFor, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: AgendaCard {dot}",
      "{dot|snakecase|camelcase} = agenda (1, A) {dot} Cards.{dot|snakecase|camelcase} (Static 12)",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg a@({dot} attrs) = runQueueT $ case msg of",
      "    AdvanceAgenda (isSide B attrs -> True) -> do",
      "      advanceAgendaDeck attrs",
      "      pure a",
      "    _ -> {dot} <$> liftRunMessage msg attrs"
    ]
  },
  "arkham-api/library/Arkham/Treachery/Cards/*.hs": {
    "type": "treachery",
    "alternate": "arkham-api/tests/Arkham/Treachery/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Treachery.Cards.{dot} ({dot|snakecase|camelcase}) where",
      "",
      "import Arkham.Treachery.Cards qualified as Cards",
      "import Arkham.Treachery.Import.Lifted",
      "",
      "newtype {dot} = {dot} TreacheryAttrs",
      "  deriving anyclass (IsTreachery, HasModifiersFor, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: TreacheryCard {dot}",
      "{dot|snakecase|camelcase} = treachery {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg t@({dot} attrs) = runQueueT $ case msg of",
      "    Revelation _iid (isSource attrs -> True) -> pure t",
      "    _ -> {dot} <$> liftRunMessage msg attrs"
    ]
  },
  "arkham-api/library/Arkham/Investigator/Cards/*.hs": {
    "type": "investigator",
    "alternate": "arkham-api/tests/Arkham/Investigator/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Investigator.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Investigator.Cards qualified as Cards",
      "import Arkham.Investigator.Import.Lifted",
      "",
      "newtype {dot} = {dot} InvestigatorAttrs",
      "  deriving anyclass (IsInvestigator, HasModifiersFor)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "  deriving stock Data",
      "",
      "{dot|snakecase|camelcase} :: InvestigatorCard {dot}",
      "{dot|snakecase|camelcase} = investigator {dot} Cards.{dot|snakecase|camelcase} $",
      "  Stats {open} health = 0, sanity = 0, willpower = 0, intellect = 0, combat = 0, agility = 0 {close}",
      "",
      "instance HasAbilities {dot} where",
      "  getAbilities ({dot} _) = []",
      "",
      "instance HasChaosTokenValue {dot} where",
      "  getChaosTokenValue iid ElderSign ({dot} attrs) | iid == toId attrs = do",
      "    pure $ ChaosTokenValue ElderSign NoModifier",
      "  getChaosTokenValue _ token _ = pure $ ChaosTokenValue token mempty",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) = runQueueT $ case msg of",
      "    _ -> {dot} <$> liftRunMessage msg attrs"
    ]
  },
  "arkham-api/library/Arkham/Enemy/Cards/*.hs": {
    "type": "enemy",
    "alternate": "arkham-api/tests/Arkham/Enemy/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Enemy.Cards.{dot} ({dot|snakecase|camelcase})  where",
      "",
      "import Arkham.Enemy.Cards qualified as Cards",
      "import Arkham.Enemy.Import.Lifted",
      "",
      "newtype {dot} = {dot} EnemyAttrs",
      "  deriving anyclass (IsEnemy, HasModifiersFor)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity, HasAbilities)",
      "",
      "{dot|snakecase|camelcase} :: EnemyCard {dot}",
      "{dot|snakecase|camelcase} = enemy {dot} Cards.{dot|snakecase|camelcase} (0, Static 1, 0) (0, 0)",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) = runQueueT $ case msg of",
      "    _ -> {dot} <$> liftRunMessage msg attrs"
    ]
  },
  "arkham-api/library/Arkham/Asset/Assets/*.hs": {
    "type": "asset",
    "alternate": "arkham-api/tests/Arkham/Asset/Assets/{}Spec.hs",
    "template": [
      "module Arkham.Asset.Assets.{dot} ({dot|snakecase|camelcase}) where",
      "",
      "import Arkham.Asset.Cards qualified as Cards",
      "import Arkham.Asset.Import.Lifted",
      "",
      "newtype {dot} = {dot} AssetAttrs",
      "  deriving anyclass (IsAsset, HasModifiersFor, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: AssetCard {dot}",
      "{dot|snakecase|camelcase} = asset {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) = runQueueT $ case msg of",
      "    _ -> {dot} <$> liftRunMessage msg attrs"
    ]
  },
  "arkham-api/library/Arkham/Event/Events/*.hs": {
    "type": "event",
    "alternate": "arkham-api/tests/Arkham/Event/Events/{}Spec.hs",
    "template": [
      "module Arkham.Event.Events.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Event.Cards qualified as Cards",
      "import Arkham.Event.Import.Lifted",
      "",
      "newtype {dot} = {dot} EventAttrs",
      "  deriving anyclass (IsEvent, HasModifiersFor, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: EventCard {dot}",
      "{dot|snakecase|camelcase} = event {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg e@({dot} attrs) = runQueueT $ case msg of",
      "    PlayThisEvent _iid (is attrs -> True) -> do",
      "      pure e",
      "    _ -> {dot} <$> liftRunMessage msg attrs"
    ]
  },
  "arkham-api/library/Arkham/Location/Cards/*.hs": {
    "type": "location",
    "alternate": "arkham-api/tests/Arkham/Location/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Location.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Location.Cards qualified as Cards",
      "import Arkham.Location.Import.Lifted",
      "",
      "newtype {dot} = {dot} LocationAttrs",
      "  deriving anyclass (IsLocation, HasModifiersFor)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: LocationCard {dot}",
      "{dot|snakecase|camelcase} = location {dot} Cards.{dot|snakecase|camelcase} 0 (Static 0)",
      "",
      "instance HasAbilities {dot} where",
      "  getAbilities ({dot} attrs) =",
      "    extendRevealed attrs []",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) = runQueueT $ case msg of",
      "    _ -> {dot} <$> liftRunMessage msg attrs"
      ]
  },
  "arkham-api/library/Arkham/Skill/Cards/*.hs": {
    "type": "skill",
    "alternate": "arkham-api/tests/Arkham/Skill/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Skill.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Skill.Cards qualified as Cards",
      "import Arkham.Skill.Import.Lifted",
      "",
      "newtype {dot} = {dot} SkillAttrs",
      "  deriving anyclass (IsSkill, HasModifiersFor, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: SkillCard {dot}",
      "{dot|snakecase|camelcase} = skill {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) = runQueueT $ case msg of",
      "    _ -> {dot} <$> liftRunMessage msg attrs"
    ]
  },
  "arkham-api/library/Arkham/Story/Cards/*.hs": {
    "type": "story",
    "alternate": "arkham-api/tests/Arkham/Story/Cards/{}Spec.hs",
    "template": [
       "module Arkham.Story.Cards.{dot}",
       "  ( {dot}(..)",
       "  , {dot|snakecase|camelcase}",
       "  ) where",
       "",
       "import Arkham.Story.Cards qualified as Cards",
       "import Arkham.Story.Import.Lifted",
       "",
       "newtype {dot} = {dot} StoryAttrs",
       "  deriving anyclass (IsStory, HasModifiersFor, HasAbilities)",
       "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
       "",
       "{dot|snakecase|camelcase} :: StoryCard {dot}",
       "{dot|snakecase|camelcase} = story {dot} Cards.{dot|snakecase|camelcase}",
       "",
       "instance RunMessage {dot} where",
       "  runMessage msg s@({dot} attrs) = runQueueT $ case msg of",
       "    ResolveStory _ ResolveIt story' | story' == toId attrs -> do",
       "      pure s",
       "    _ -> {dot} <$> liftRunMessage msg attrs"
    ]
  },
  "arkham-api/library/Arkham/*.hs": {
    "type": "core",
    "alternate": "arkham-api/tests/Arkham/{}Spec.hs",
    "template": [
      "module Arkham.{dot}",
      "  ( undefined",
      "  )",
      "where",
      "",
      "import Arkham.Prelude"
    ]
  },
  "arkham-api/tests/Arkham/*Spec.hs": {
    "alternate": "arkham-api/library/Arkham/{}.hs",
    "template": [
      "module Arkham.{dot}Spec",
      "  ( spec",
      "  )",
      "where",
      "",
      "import TestImport",
      "",
      "spec :: Spec",
      "spec = undefined"
    ]
  }
}
